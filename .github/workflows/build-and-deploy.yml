name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - labeled
      - synchronize
      - reopened
      - opened
      - converted_to_draft
permissions:
  contents: write
  deployments: write
  packages: write
  pull-requests: write
  id-token: write

jobs:
  build_image:
    name: Image build and push
    if: contains(github.event.pull_request.labels.*.name, 'deploy-aks') || github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      docker-image-tag: ${{ steps.build-image.outputs.tag }}
    steps:
      - uses: actions/checkout@v5

      - name: Build and push docker image
        id: build-image
        uses: DFE-Digital/github-actions/build-docker-image@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          context: .
          max-cache: true
          reuse-cache: true
          snyk-token: ${{ secrets.SNYK_TOKEN }}

  deploy_review_app_aks:
    name: Deploy to review environment to AKS
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'deploy-aks')
    concurrency: deploy_review_${{ github.event.pull_request.number }}
    needs: [build_image]
    environment:
      name: review
    permissions:
      pull-requests: write
      id-token: write

    steps:
      - uses: actions/checkout@v5

      - uses: ./.github/actions/deploy-environment-aks
        id: deploy_aks
        with:
          environment: review
          image-tag: ${{ needs.build_image.outputs.docker-image-tag }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          pull-request-number: ${{ github.event.pull_request.number }}

      - name: Post comment to Pull Request ${{ github.event.pull_request.number }}
        uses: marocchino/sticky-pull-request-comment@773744901bac0e8cbb5a0dc842800d45e9b2b405 # Pinned at v2.9.4
        with:
          header: aks
          message: |
            ### Deployments

            | App               | URL                                                                                                                                       |
            | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------|
            | Refer Serious Misconduct      | <https://refer-serious-misconduct-pr-${{ github.event.pull_request.number }}.test.teacherservices.cloud>            |

  deploy_aks:
    name: Deploy to ${{ matrix.environment }} environment for AKS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    concurrency: deploy_${{ matrix.environment }}
    needs: [build_image]
    strategy:
      max-parallel: 1
      matrix:
        environment: [test, preprod, production]
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.environment_url }}
    outputs:
      environment_name: ${{ matrix.environment }}
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v5

      - name: Deploy to AKS
        uses: ./.github/actions/deploy-environment-aks
        id: deploy
        with:
          environment: ${{ matrix.environment }}
          image-tag: ${{ needs.build_image.outputs.docker-image-tag }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}

  notify_slack_of_failures:
    name: Notify Slack of failures
    runs-on: ubuntu-latest
    needs: [build_image, deploy_review_app_aks, deploy_aks]
    environment: test
    env:
      ENVIRONMENT_NAME: ${{ needs.deploy_aks.outputs.environment_name || 'dev'  }}
    if: failure()
    steps:
      - uses: actions/checkout@v5

      - name: Set Environment variables
        shell: bash
        working-directory: terraform
        run: |
          if ${{ needs.build_image.result == 'failure' }}
          then
            job=build_image
          elif ${{ needs.deploy_review_app_aks.result == 'failure' }}
          then
            job=deploy_review_app_aks
            review=true
          elif ${{ needs.deploy_aks.result == 'failure' }}
          then
            job=deploy_aks
          fi

          echo "JOB=${job}" >> $GITHUB_ENV
          echo "REVIEW=${review}" >> $GITHUB_ENV

      - uses: Azure/login@v2
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: Fetch secrets from key vault
        uses: azure/CLI@v2
        id: key-vault-secrets
        with:
          inlineScript: |
            SLACK_WEBHOOK=$(az keyvault secret show --name "SLACK-WEBHOOK" --vault-name  s189t01-rsm-ts-inf-kv --query "value" -o tsv)
            echo "::add-mask::$SLACK_WEBHOOK"
            echo "SLACK_WEBHOOK=$SLACK_WEBHOOK" >> $GITHUB_OUTPUT

      - name: Notify Slack channel on job failure
        uses: rtCamp/action-slack-notify@e31e87e03dd19038e411e38ae27cbad084a90661 # Pinned at v2.3.3
        env:
          SLACK_USERNAME: CI Deployment
          SLACK_TITLE: Deployment of refer-serious-misconduct ${{ env.REVIEW && 'review' }} failed
          SLACK_MESSAGE: Job ${{ env.JOB }} failed
          SLACK_WEBHOOK: ${{ steps.key-vault-secrets.outputs.SLACK_WEBHOOK }}
          SLACK_COLOR: failure
          SLACK_FOOTER: Sent from Build and Deploy workflow

  deploy_domains_infra:
    name: Deploy Domains Infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    concurrency: deploy_domains_infra
    needs: [deploy_aks]
    environment:
      name: production

    steps:
      - name: Deploy Domains Infrastructure
        id: deploy_domains_infra
        uses: DFE-Digital/github-actions/deploy-domains-infra@master
        with:
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID  }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID   }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID   }}
          slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
          terraform-base: terraform/domains/infrastructure

  deploy_domains_env:
    name: Deploy Domains to ${{ matrix.domain_environment }} environment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    concurrency: deploy_domains_env_${{ matrix.domain_environment }}
    needs: [deploy_domains_infra]
    strategy:
      max-parallel: 1
      matrix:
        domain_environment: [test, preprod, production]
    environment:
      name: production

    steps:
      - name: Deploy Domains Environment
        id: deploy_domains_env
        uses: DFE-Digital/github-actions/deploy-domains-env@master
        with:
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID  }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID   }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID   }}
          environment: ${{ matrix.domain_environment }}
          healthcheck: health
          slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
          terraform-base: terraform/domains/environment_domains
