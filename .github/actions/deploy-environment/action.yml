name: Deploy to Azure

inputs:
  environment_name:
    description: The name of the environment
    required: true
  image_name_tag:
    description: Image name and tag
  image_tag:
    description: GitHub SHA of the image
    required: true
  azure_credentials:
    description: JSON object containing a service principal that can read from Azure Key Vault
    required: true
  site_up_retries:
    description: The number of times that the site up test will be retried
    default: 60

outputs:
  environment_url:
    description: The base URL for the deployed environment
    value: ${{ steps.terraform.outputs.app_fqdn }}

runs:
  using: composite

  steps:
    # Extract configuration from tfvars
    - id: config
      run: |
        APP_RESOURCE_GROUP_NAME=$(jq -r '.resource_group_name' $TFVARS)
        RESOURCE_PREFIX=$(jq -r '.resource_prefix' $TFVARS)
        STORAGE_ACCOUNT_NAME=$(jq -r '.storage_account_name' $TFVARS)
        TERRAFORM_VERSION=$(awk '/{/{f=/^terraform/;next}f' terraform.tf | grep -o [0-9\.]*)

        if [ ${{ inputs.environment_name }} == "review" ]; then
          DEV_TFVARS=workspace_variables/dev.tfvars.json
          KEY_VAULT_NAME=$(jq -r '.key_vault_name' $DEV_TFVARS)
          REVIEW_APP_SUFFIX=-pr-${{ github.event.pull_request.number }}
          TF_RESOURCE_GROUP_NAME=$(jq -r '.resource_group_name' $DEV_TFVARS)
        else
          KEY_VAULT_NAME=$(jq -r '.key_vault_name' $TFVARS)
          TF_RESOURCE_GROUP_NAME=$(jq -r '.resource_group_name' $TFVARS)
        fi

        if [ -z "$APP_RESOURCE_GROUP_NAME" ]; then
          echo "::error ::Failed to extract app_resource_group_name from $TFVARS"
          exit 1
        fi

        if [ -z "$KEY_VAULT_NAME" ]; then
          echo "::error ::Failed to extract key_vault_name from $TFVARS"
          exit 1
        fi

        if [ -z "$RESOURCE_PREFIX" ]; then
          echo "::error ::Failed to extract resource_prefix from $TFVARS"
          exit 1
        fi

        if [ -z "$STORAGE_ACCOUNT_NAME" ]; then
          echo "::error ::Failed to extract storage_account_name from $TFVARS"
          exit 1
        fi

        if [ -z "$TERRAFORM_VERSION" ]; then
          echo "::error ::Failed to extract terraform_version from terraform.tf"
          exit 1
        fi

        if [ -z "$TF_RESOURCE_GROUP_NAME" ]; then
          echo "::error ::Failed to extract tf_resource_group_name from TFVARS"
          exit 1
        fi

        echo "app_resource_group_name=$APP_RESOURCE_GROUP_NAME" >> $GITHUB_ENV
        echo "key_vault_name=$KEY_VAULT_NAME" >> $GITHUB_ENV
        echo "resource_prefix=$RESOURCE_PREFIX" >> $GITHUB_ENV
        echo "review_app_suffix=$REVIEW_APP_SUFFIX" >> $GITHUB_ENV
        echo "storage_account_name=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
        echo "terraform_version=$TERRAFORM_VERSION" >> $GITHUB_ENV
        echo "tf_resource_group_name=$TF_RESOURCE_GROUP_NAME" >> $GITHUB_ENV

      shell: bash
      env:
        TFVARS: workspace_variables/${{ inputs.environment_name }}.tfvars.json
      working-directory: terraform

    - uses: Azure/login@v1
      with:
        creds: ${{ inputs.azure_credentials }}

    - id: deploy-arm-resources
      if: ${{ inputs.environment_name != 'review' }}
      run: |
        make ci ${{ inputs.environment_name }} deploy-azure-resources
      shell: bash

    - run: |
        TFSTATE_CONTAINER_ACCESS_KEY="$(az storage account keys list -g ${{ env.tf_resource_group_name }} -n ${{ env.storage_account_name }} | jq -r '.[0].value')"
        echo "::add-mask::$TFSTATE_CONTAINER_ACCESS_KEY"
        echo "TFSTATE_CONTAINER_ACCESS_KEY=$TFSTATE_CONTAINER_ACCESS_KEY" >> $GITHUB_ENV
      shell: bash

    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ ENV.terraform_version }}
        terraform_wrapper: false

    - id: terraform
      run: |
        if [ ${{ inputs.environment_name }} == "review" ]; then
          make ci ${{ inputs.environment_name }} terraform-apply pr_id=${{ github.event.pull_request.number }}
        else
          make ci ${{ inputs.environment_name }} terraform-apply
        fi
        cd terraform
        OUTPUTS=($(terraform output --json | jq -r 'keys | @sh' | tr -d \'))
        for o in "${OUTPUTS[@]}"
        do
          echo "${o}=$(terraform output -raw ${o})" >> $GITHUB_ENV
        done
        echo "app_fqdn=$(terraform output -raw app_fqdn)" >>$GITHUB_OUTPUT
      env:
        ARM_ACCESS_KEY: ${{ env.TFSTATE_CONTAINER_ACCESS_KEY }}
        TF_VAR_azure_sp_credentials_json: ${{ inputs.azure_credentials }}
        TF_VAR_rsm_docker_image: ${{ inputs.image_name_tag }}
      shell: bash

    - uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.resource_prefix }}-${{ inputs.environment_name}}${{ env.review_app_suffix }}-app
        images: ${{ inputs.image_name_tag }}
        slot-name: ${{ env.web_app_slot_name }}

    - uses: azure/CLI@v1
      if: ${{ env.web_app_slot_name != 'production' }}
      with:
        inlineScript: |
          az webapp deployment slot swap -g ${{ env.app_resource_group_name }} -n ${{ env.web_app_name }} --slot ${{ env.web_app_slot_name }} --target-slot production

    # Check new site is up
    - run: |
        echo "Checking new site is up"
        attempt_counter=0
        max_attempts=$RETRIES

        SHA_URL="${{ env.app_fqdn }}/_sha"
        APP_SHA=$(curl $SHA_URL --silent)
        until [[ "$EXPECTED_SHA" == "$APP_SHA" ]]; do
            if [ ${attempt_counter} -eq ${max_attempts} ];then
              echo "Max attempts reached"
              exit 1
            fi
            echo "Attempt $attempt_counter: new site not up, retrying in 5 seconds ..."
            sleep 5
            attempt_counter=$(($attempt_counter+1))
            APP_SHA=$(curl $SHA_URL --silent)
        done
      shell: bash
      env:
        EXPECTED_SHA: ${{ inputs.image_tag }}
        RETRIES: ${{ inputs.site_up_retries }}
